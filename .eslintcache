[{"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/index.js":"1","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/App.js":"2","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/reportWebVitals.js":"3","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/Main/Main.js":"4","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/Header/Header.js":"5","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/SearchField/SearchField.js":"6","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/TextField/TextField.js":"7","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Icons/Icons.js":"8","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Button/SearchButton/Button.js":"9","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/UI/Modal/Modal.js":"10","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/UI/Backdrop/Backdrop.js":"11","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantCards/PlantCard.js":"12","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/UI/Spinner/Spinner.js":"13","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantInfoCard/PlantInfoCard.js":"14","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/AddPlantForm/AddPlantForm.js":"15"},{"size":500,"mtime":1609854052923,"results":"16","hashOfConfig":"17"},{"size":250,"mtime":1611142920641,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1609854052923,"results":"19","hashOfConfig":"17"},{"size":5028,"mtime":1611318557013,"results":"20","hashOfConfig":"17"},{"size":1065,"mtime":1611151879795,"results":"21","hashOfConfig":"17"},{"size":795,"mtime":1610460029620,"results":"22","hashOfConfig":"17"},{"size":1096,"mtime":1610736969457,"results":"23","hashOfConfig":"17"},{"size":1174,"mtime":1611137580708,"results":"24","hashOfConfig":"17"},{"size":505,"mtime":1610726371243,"results":"25","hashOfConfig":"17"},{"size":316,"mtime":1611070221032,"results":"26","hashOfConfig":"17"},{"size":224,"mtime":1610633195729,"results":"27","hashOfConfig":"17"},{"size":1609,"mtime":1611151557673,"results":"28","hashOfConfig":"17"},{"size":168,"mtime":1610800624572,"results":"29","hashOfConfig":"17"},{"size":443,"mtime":1611149300249,"results":"30","hashOfConfig":"17"},{"size":3112,"mtime":1611314919644,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1iumouw",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/index.js",[],["72","73"],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/App.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/reportWebVitals.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/Main/Main.js",["74","75","76"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Main.module.scss';\nimport Header from '../Header/Header';\nimport SearchField from '../SearchField/SearchField';\nimport PlantCard from '../PlantCards/PlantCard';\nimport Button from '../../controls/Button/SearchButton/Button';\nimport Spinner from '../UI/Spinner/Spinner';\nimport Modal from '../UI/Modal/Modal';\nimport PlantInfoCard from '../PlantInfoCard/PlantInfoCard';\nimport Icon from '../../controls/Icons/Icons';\nimport AddPlantForm from '../AddPlantForm/AddPlantForm';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport spinner from '../UI/Spinner/Spinner';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      plants: [],\n      query: '',\n      selectedPlants: [],\n      isFetchingData: true,\n      isActive: null,\n      show: false,\n      requestedInfo: '',\n    };\n  }\n  // set state from external source\n  componentDidMount() {\n    fetch('./importData.json')\n      .then((response) => response.json())\n      .then((response) => {\n        const plants = [];\n        for (let plant of response.plants) {\n          plants.push({\n            id: plant.id,\n            name: plant.name,\n            photo:\n              plant.photo ||\n              'https://images.all-free-download.com/images/graphiclarge/orchid_pot_drawing_3d_retro_design_6833722.jpg',\n            water: plant.watering,\n            light: plant.lighting,\n            edible: plant.edible,\n            species: plant.species,\n          });\n        }\n\n        this.setState({\n          plants: plants,\n          isFetchingData: false,\n        });\n      })\n      .catch((error) => console.log('Error', error));\n  }\n\n  // search method - condens search parameters\n  search = (obj, keys, query) => {\n    if (!keys || keys.length === 0) {\n      return false;\n    }\n    return keys.some((key) => {\n      if (!obj[key]) {\n        return false;\n      }\n      return obj[key].toLowerCase().includes(query.toLowerCase());\n    });\n  };\n\n  // handle search bar inputs below\n  handleSearchBarInput = (value) => {\n    if (value.length < 3) {\n      this.setState({ query: value });\n      return;\n    }\n    const plants = [...this.state.plants];\n\n    const searchedPlants = plants.filter((plant) =>\n      this.search(plant, ['name', 'species'], value)\n    );\n    this.setState({\n      ...this.state,\n      query: value,\n      selectedPlants: searchedPlants,\n    });\n  };\n  // toggle modal visibility below\n  toggleModal = () => {\n    this.setState({ show: !this.state.show });\n  };\n\n  // handle buttons for watering, lighting and edibility below\n  handlePlantRequirement = (careType, careInfo, photo) => {\n    this.toggleModal();\n    if (!careType || !careInfo) {\n      return;\n    }\n    const modalInfo = { careType, careInfo, photo };\n    this.setState({ requestedInfo: modalInfo });\n  };\n\n  render() {\n    const {\n      plants,\n      selectedPlants,\n      isFetchingData,\n      query,\n      requestedInfo,\n    } = this.state;\n\n    const plantsRendered = plants.map((plant) => (\n      <PlantCard\n        name={plant.name}\n        species={plant.species}\n        photo={plant.photo}\n        key={plant.id}\n        watering={plant.water}\n        edible={plant.edible}\n        lighting={plant.light}\n        handleButtonClick={this.handlePlantRequirement}\n      />\n    ));\n\n    const plantsQuerried = !selectedPlants.length ? (\n      <Spinner />\n    ) : (\n      selectedPlants.map((plant) => (\n        <PlantCard\n          name={plant.name}\n          species={plant.species}\n          photo={plant.photo}\n          key={plant.id}\n          watering={plant.water}\n          edible={plant.edible}\n          lighting={plant.light}\n          handleButtonClick={this.handlePlantRequirement}\n        />\n      ))\n    );\n\n    const mainPlantsRender = isFetchingData ? (\n      <div>\n        <Spinner />\n      </div>\n    ) : query.length > 2 ? (\n      <div className={styles.plantsQuerried}>{plantsQuerried}</div>\n    ) : (\n      <div className={styles.plantsRendered}>{plantsRendered}</div>\n    );\n\n    const modalInfo = (\n      <PlantInfoCard\n        heading={requestedInfo.careType}\n        info={requestedInfo.careInfo}\n        photo={requestedInfo.photo}\n      />\n    );\n\n    return (\n      <div>\n        <Header />\n\n        <Route path=\"/\" exact>\n          <div className={styles.Main}>\n            <div className={styles.SearchField}>\n              <SearchField onChange={this.handleSearchBarInput} />\n              <Link to=\"/addPlantForm\">\n                <Button>\n                  <Icon type=\"Add\" width=\"23px\" />\n                </Button>\n              </Link>\n            </div>\n            <Modal show={this.state.show} clicked={this.toggleModal}>\n              {modalInfo}\n            </Modal>\n            {mainPlantsRender}\n          </div>\n        </Route>\n\n        <Route path=\"/addPlantForm\" component={AddPlantForm} />\n      </div>\n    );\n  }\n}\n\nMain.propTypes = {};\n\nMain.defaultProps = {};\n\nexport default Main;\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/Header/Header.js",["77","78"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Header.module.scss';\nimport TextField from '../TextField/TextField';\nimport Icon from '../../controls/Icons/Icons';\nimport { Link } from 'react-router-dom';\n\nclass Header extends React.Component {\n  goHome = () => {};\n\n  render() {\n    return (\n      <div className={styles.Header}>\n        {/* rename goHome and implement routing to go to Main Page */}\n        <Link to=\"/\">\n          <Icon type=\"Logo\" width=\"30px\" clicked={this.goHome} />\n        </Link>\n        <div className={styles.AppName}>\n          <h1 className={styles.AppHeader}>Plant Caretaker </h1>\n          <h3 className={styles.AppSubHeader}>\n            Green Thumbs or Not, we got you covered!\n          </h3>\n        </div>\n        {/* implement Burger menu - dropdown - add menu items */}\n        <Icon type=\"Menu\" width=\"22px\" />\n        {/* <TextField placeholder=\"What plant are you looking for?\" /> */}\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {};\n\nHeader.defaultProps = {};\n\nexport default Header;\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/SearchField/SearchField.js",["79","80","81"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SearchField.module.scss';\nimport TextField from '../TextField/TextField';\nimport Button from '../../controls/Button/SearchButton/Button';\nimport Icon from '../../controls/Icons/Icons';\n\nclass SearchField extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className={styles.SearchField}>\n        <TextField\n          placeholder=\"check up on your plants\"\n          {...this.props}\n        />\n        {/* add buttons for edit and add plants with forms for adding and editing the selected plants */}\n        <Button type=\"search\"></Button>\n      </div>\n    );\n  }\n}\n\nSearchField.propTypes = {};\n\nSearchField.defaultProps = {};\n\nexport default SearchField;\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/TextField/TextField.js",["82","83","84"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TextField.module.scss';\nimport Icon from '../../controls/Icons/Icons';\n\nclass TextField extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.value;\n    this.props.onChange(value);\n  };\n\n  render() {\n    const { defaultValue, placeholder, onClick } = this.props;\n\n    return (\n      <div className={styles.TextField}>\n        <div className={styles.SearchInput}>\n          <input\n            className={styles.Input}\n            type=\"text\"\n            defaultValue={defaultValue}\n            placeholder={placeholder}\n            onChange={this.handleInputChange}\n          />\n          <button type=\"search\" value=\"search\"></button>\n        </div>\n      </div>\n    );\n  }\n}\n\n<form class=\"searchbox\"></form>;\n\nTextField.propTypes = {\n  onChange: PropTypes.func,\n  defaultValue: PropTypes.string,\n};\n\nTextField.defaultProps = {\n  onChange: () => {},\n  defaultValue: '',\n};\n\nexport default TextField;\n",["85","86"],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Icons/Icons.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Button/SearchButton/Button.js",["87","88","89"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Button.module.scss';\n\nconst SearchButton = (props) => {\n  const { label, type } = props;\n\n  return (\n    <div>\n      <button\n        className={\n          props.type === 'search'\n            ? styles.SearchButton\n            : styles.AddButton\n        }>\n        <div> {props.children}</div>\n      </button>\n    </div>\n  );\n};\n\nSearchButton.propTypes = {};\n\nSearchButton.defaultProps = {};\n\nexport default SearchButton;\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/UI/Modal/Modal.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/UI/Backdrop/Backdrop.js",[],["90","91"],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantCards/PlantCard.js",["92"],"import React from 'react';\nimport styles from './PlantCard.module.scss';\nimport Icon from '../../controls/Icons/Icons';\n\nconst plantCard = (props) => {\n  return (\n    <div\n      className={styles.plantCardContainer}\n      onClick={props.plantAccessed}>\n      {/* implement action on badge click -> open new route to full plant page */}\n      <p className={styles.plantCardName}>\"{props.name}\" </p>\n\n      <img\n        src={props.photo}\n        height={props.height}\n        width={props.width}\n      />\n      <p className={styles.plantCardParagraph}>{props.species}</p>\n      <div className={styles.PlantInfo}>\n        <button\n          className={styles.WateringProperty}\n          onClick={props.handleButtonClick.bind(\n            this,\n            'watering',\n            props.watering,\n            props.photo\n          )}>\n          <Icon type=\"Water\" width=\"25px\" />\n        </button>\n        <button\n          className={styles.EdibleProperty}\n          onClick={props.handleButtonClick.bind(\n            this,\n            'edible',\n            props.edible,\n            props.photo\n          )}>\n          <Icon type=\"Edible\" width=\"25px\" />\n        </button>\n        <button\n          className={styles.LightingProperty}\n          onClick={props.handleButtonClick.bind(\n            this,\n            'lighting',\n            props.lighting,\n            props.photo\n          )}>\n          <Icon type=\"Light\" width=\"25px\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nplantCard.defaultProps = {\n  width: '140px',\n  height: '140px',\n};\n\n// plantCard.propTypes = {};\n\nexport default plantCard;\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/UI/Spinner/Spinner.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantInfoCard/PlantInfoCard.js",["93"],"import React from 'react';\nimport styles from './PlantInfoCard.module.scss';\nimport Icon from '../../controls/Icons/Icons';\n\nconst plantInfoCard = (props) => {\n  return (\n    <div className={styles.PlantInfoCard}>\n      <div>\n        <img src={props.photo} alt=\"\" />\n      </div>\n      <h3 className={styles.Heading}>{props.heading}</h3>\n      <p className={styles.Paragraph}>{props.info}</p>\n    </div>\n  );\n};\n\nexport default plantInfoCard;\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/AddPlantForm/AddPlantForm.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":17},{"ruleId":"98","severity":1,"message":"102","line":13,"column":23,"nodeType":"100","messageId":"101","endLine":13,"endColumn":29},{"ruleId":"98","severity":1,"message":"103","line":14,"column":8,"nodeType":"100","messageId":"101","endLine":14,"endColumn":15},{"ruleId":"98","severity":1,"message":"99","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":17},{"ruleId":"98","severity":1,"message":"104","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":17},{"ruleId":"98","severity":1,"message":"99","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":17},{"ruleId":"98","severity":1,"message":"105","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":12},{"ruleId":"106","severity":1,"message":"107","line":9,"column":3,"nodeType":"108","messageId":"109","endLine":11,"endColumn":4},{"ruleId":"98","severity":1,"message":"105","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":12},{"ruleId":"106","severity":1,"message":"107","line":7,"column":3,"nodeType":"108","messageId":"109","endLine":9,"endColumn":4},{"ruleId":"98","severity":1,"message":"110","line":18,"column":40,"nodeType":"100","messageId":"101","endLine":18,"endColumn":47},{"ruleId":"94","replacedBy":"111"},{"ruleId":"96","replacedBy":"112"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":17},{"ruleId":"98","severity":1,"message":"113","line":6,"column":11,"nodeType":"100","messageId":"101","endLine":6,"endColumn":16},{"ruleId":"98","severity":1,"message":"114","line":6,"column":18,"nodeType":"100","messageId":"101","endLine":6,"endColumn":22},{"ruleId":"94","replacedBy":"115"},{"ruleId":"96","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":13,"column":7,"nodeType":"119","endLine":17,"endColumn":9},{"ruleId":"98","severity":1,"message":"105","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":12},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'spinner' is defined but never used.","'TextField' is defined but never used.","'Icon' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'onClick' is assigned a value but never used.",["120"],["121"],"'label' is assigned a value but never used.","'type' is assigned a value but never used.",["120"],["121"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]