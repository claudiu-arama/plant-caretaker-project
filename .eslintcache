[{"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/index.js":"1","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/App.js":"2","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/reportWebVitals.js":"3","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/SearchField/SearchField.js":"4","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/TextField/TextField.js":"5","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Icons/Icons.js":"6","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantCards/PlantCard.js":"7","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantInfoCard/PlantInfoCard.js":"8","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/containers/Main/Main.js":"9","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/containers/Header/Header.js":"10","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/UI/Spinner/Spinner.js":"11","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/UI/Modal/Modal.js":"12","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/BurgerMenu/BurgerMenu.js":"13","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Button/Button.js":"14","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantPage/PlantPage.js":"15","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/Forms/AddPlantForm/AddPlantForm.js":"16"},{"size":500,"mtime":1613490995666,"results":"17","hashOfConfig":"18"},{"size":251,"mtime":1613484386168,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1609854052923,"results":"20","hashOfConfig":"18"},{"size":596,"mtime":1611918026700,"results":"21","hashOfConfig":"18"},{"size":1007,"mtime":1612209776981,"results":"22","hashOfConfig":"18"},{"size":1624,"mtime":1613485836279,"results":"23","hashOfConfig":"18"},{"size":2640,"mtime":1614100900188,"results":"24","hashOfConfig":"18"},{"size":2002,"mtime":1613485149448,"results":"25","hashOfConfig":"18"},{"size":9802,"mtime":1614100899468,"results":"26","hashOfConfig":"18"},{"size":1092,"mtime":1612185215337,"results":"27","hashOfConfig":"18"},{"size":168,"mtime":1610800624572,"results":"28","hashOfConfig":"18"},{"size":316,"mtime":1611070221032,"results":"29","hashOfConfig":"18"},{"size":998,"mtime":1613486460011,"results":"30","hashOfConfig":"18"},{"size":725,"mtime":1611918589832,"results":"31","hashOfConfig":"18"},{"size":3919,"mtime":1614152867958,"results":"32","hashOfConfig":"18"},{"size":3203,"mtime":1613051201545,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1iumouw",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/index.js",[],["68","69"],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/App.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/reportWebVitals.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/SearchField/SearchField.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/TextField/TextField.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Icons/Icons.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantCards/PlantCard.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantInfoCard/PlantInfoCard.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/containers/Main/Main.js",["70"],"import React from 'react';\n// import PropTypes from 'prop-types';\nimport styles from './Main.module.scss';\nimport Header from '../Header/Header';\nimport SearchField from '../../components/SearchField/SearchField';\nimport PlantCard from '../../components/PlantCards/PlantCard';\nimport Button from '../../controls/Button/Button';\nimport Spinner from '../../UI/Spinner/Spinner';\nimport Modal from '../../UI/Modal/Modal';\nimport PlantInfoCard from '../../components/PlantInfoCard/PlantInfoCard';\nimport Icon from '../../controls/Icons/Icons';\nimport AddPlantForm from '../../components/Forms/AddPlantForm/AddPlantForm';\nimport { Route, Link, Switch, withRouter } from 'react-router-dom';\nimport BurgerMenu from '../../components/BurgerMenu/BurgerMenu';\nimport PlantPage from '../../components/PlantPage/PlantPage';\nimport moment from 'moment';\nimport plantInfoCard from '../../components/PlantInfoCard/PlantInfoCard';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      plants: [],\n      query: '',\n      selectedPlants: [],\n      isFetchingData: true,\n      showPlantInfoModal: false,\n      showPlantWateringModal: false,\n      wateredPlant: [],\n      requestedInfo: '',\n      menuOpen: false,\n    };\n  }\n  // set state from external source\n  componentDidMount() {\n    fetch(\n      'https://plantcaretaker-3606a-default-rtdb.europe-west1.firebasedatabase.app/plants.json'\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        const plants = [];\n        for (let plantID in response) {\n          const plant = response[plantID];\n          plants.push({\n            id: plant.id,\n            name: plant.name,\n            photo:\n              plant.photo ||\n              'https://images.all-free-download.com/images/graphiclarge/orchid_pot_drawing_3d_retro_design_6833722.jpg',\n            water: plant.watering,\n            light: plant.lighting,\n            edible: plant.edible,\n            species: plant.species,\n            lastWatered: plant.lastWatered,\n            nextWatering: plant.nextWatering,\n            waterInterval: plant.waterInterval || {\n              num: 72,\n              time: 'hours',\n            },\n            // extra state, not needed for now\n            needsWatering: plant.needsWatering,\n          });\n        }\n\n        this.setState({\n          plants: plants,\n          isFetchingData: false,\n        });\n      })\n      .catch((error) => console.log('Error', error));\n  }\n\n  // search method - condens search parameters\n  search = (obj, keys, query) => {\n    if (!keys || keys.length === 0) {\n      return false;\n    }\n    return keys.some((key) => {\n      if (!obj[key]) {\n        return false;\n      }\n      return obj[key].toLowerCase().includes(query.toLowerCase());\n    });\n  };\n\n  // handle search bar inputs below\n  handleSearchBarInput = (value) => {\n    if (value.length < 3) {\n      this.setState({ query: value });\n      return;\n    }\n    const plants = [...this.state.plants];\n\n    const selectedPlants = plants.filter((plant) =>\n      this.search(plant, ['name', 'species'], value)\n    );\n    this.setState({\n      ...this.state,\n      query: value,\n      selectedPlants: selectedPlants,\n    });\n  };\n  // toggle modal visibility below\n  togglePlantInfoModal = () => {\n    this.setState({\n      showPlantInfoModal: !this.state.showPlantInfoModal,\n    });\n  };\n  // toggle burger menu visibiliry below\n  toggleBurgerMenu = () => {\n    this.setState({ menuOpen: !this.state.menuOpen });\n  };\n\n  // access plant page below\n  AccesPlantPage = (id) => {\n    const myPlant = this.state.plants.find((elem) => elem.id === id);\n    this.props.history.push({\n      pathname: '/p/' + myPlant.id,\n      info: myPlant,\n    });\n  };\n\n  // handle buttons for watering, lighting and edibility info below\n  handlePlantRequirement = (careType, careInfo, photo) => {\n    this.togglePlantInfoModal();\n    if (!careType || !careInfo) {\n      return;\n    }\n    const modalInfo = { careType, careInfo, photo };\n    this.setState({ requestedInfo: modalInfo });\n  };\n\n  //handle button for marking the watering of a plant\n  handlePlantWateringButton = (plantID, plantName) => {\n    if (!plantID || !plantName) {\n      return;\n    }\n\n    const plant = this.state.plants.find(\n      (elem) => elem.id === plantID\n    );\n\n    const waterInterval = plant.waterInterval;\n\n    const timeOfWatering = moment()\n      .utc()\n      .format('dddd, MMMM Do YYYY, h:mm a');\n\n    const nextTimeOfWatering = moment()\n      .add(waterInterval.num, waterInterval.time)\n      .utc()\n      .format('dddd, MMMM Do YYYY, h:mm a');\n\n    const timeOfNextWatering = moment()\n      .add(waterInterval.num, waterInterval.time)\n      .utc()\n      .format();\n\n    this.setState((prevState) => {\n      const updatedPlants = prevState.plants.map((plant) => {\n        if (plant.id === plantID) {\n          plant.needsWatering = false;\n          plant.lastWatered = timeOfWatering;\n          plant.nextWatering = nextTimeOfWatering;\n        }\n\n        return plant;\n      });\n\n      return {\n        plants: updatedPlants,\n        wateredPlant: plant,\n        showPlantWateringModal: true,\n      };\n    });\n\n    const wateringInterval = setInterval(() => {\n      let currentTime = moment().utc().format();\n      if (currentTime === timeOfNextWatering) {\n        clearInterval(wateringInterval);\n        this.setState((prevState) => {\n          const updatedPlants = prevState.plants.map((plant) => {\n            if (plant.id === plantID) {\n              plant.needsWatering = true;\n            }\n            return plant;\n          });\n          return {\n            plants: updatedPlants,\n            showPlantWateringModal: true,\n            wateredPlant: plant,\n          };\n        });\n      }\n    }, 1000);\n  };\n\n  togglePlantWateringModal = () => {\n    this.setState({\n      showPlantWateringModal: !this.state.showPlantWateringModal,\n    });\n  };\n\n  render() {\n    const {\n      plants,\n      selectedPlants,\n      isFetchingData,\n      query,\n      requestedInfo,\n      wateredPlant,\n      showPlantInfoModal,\n      showPlantWateringModal,\n    } = this.state;\n\n    const plantsRendered = plants.map((plant) => (\n      <PlantCard\n        name={plant.name}\n        species={plant.species}\n        photo={plant.photo}\n        key={plant.id}\n        item={plant.id}\n        watering={plant.water}\n        edible={plant.edible}\n        lighting={plant.light}\n        waterInterval={plant.waterInterval}\n        needsWatering={plant.needsWatering}\n        handleButtonClick={this.handlePlantRequirement}\n        plantAccessed={() => this.AccesPlantPage(plant.id)}\n        handlePlantWatering={this.handlePlantWateringButton}\n      />\n    ));\n\n    const plantsQuerried = !selectedPlants.length ? (\n      <Spinner />\n    ) : (\n      selectedPlants.map((plant) => (\n        <PlantCard\n          name={plant.name}\n          species={plant.species}\n          photo={plant.photo}\n          key={plant.id}\n          item={plant.id}\n          watering={plant.water}\n          edible={plant.edible}\n          lighting={plant.light}\n          waterInterval={plant.waterInterval}\n          needsWatering={plant.needsWatering}\n          handleButtonClick={this.handlePlantRequirement}\n          plantAccessed={() => this.AccesPlantPage(plant.id)}\n          handlePlantWatering={this.handlePlantWateringButton}\n        />\n      ))\n    );\n\n    const mainPlantsRender = isFetchingData ? (\n      <div>\n        <Spinner />\n      </div>\n    ) : query.length > 2 ? (\n      <div className={styles.plantsQuerried}>{plantsQuerried}</div>\n    ) : (\n      <div className={styles.plantsRendered}>{plantsRendered}</div>\n    );\n\n    const modalInfo = (\n      <PlantInfoCard\n        type=\"plantInfo\"\n        name={requestedInfo.careType}\n        info={requestedInfo.careInfo}\n        photo={requestedInfo.photo}\n      />\n    );\n\n    const wateredPlantInformation = (\n      <PlantInfoCard\n        type=\"plantWatering\"\n        name={wateredPlant.name}\n        info={wateredPlant.species}\n        photo={wateredPlant.photo}\n        timeOfWatering={wateredPlant.lastWatered}\n        nextTimeOfWatering={wateredPlant.nextWatering}\n        needsWatering={wateredPlant.needsWatering}\n      />\n    );\n\n    return (\n      <div>\n        <Header toggleBurgerMenu={this.toggleBurgerMenu} />\n        <BurgerMenu isOpen={this.state.menuOpen} />\n        <main>\n          <Switch>\n            <Route path=\"/\" exact>\n              <div className={styles.Main}>\n                <div className={styles.SearchField}>\n                  <SearchField onChange={this.handleSearchBarInput} />\n\n                  <Link to=\"/addPlantForm\">\n                    <Button type=\"Add\">\n                      <Icon type=\"Add\" width=\"23px\" />\n                    </Button>\n                  </Link>\n                </div>\n\n                <Modal\n                  show={showPlantInfoModal}\n                  clicked={this.togglePlantInfoModal}>\n                  {modalInfo}\n                </Modal>\n                <Modal\n                  show={showPlantWateringModal}\n                  clicked={this.togglePlantWateringModal}>\n                  {wateredPlantInformation}\n                </Modal>\n\n                {mainPlantsRender}\n              </div>\n            </Route>\n\n            <Route path=\"/addPlantForm\" component={AddPlantForm} />\n            <Route\n              path={this.props.match.url + ':id'}\n              render={(props) => (\n                <PlantPage\n                  {...props}\n                  handleButtonClick={this.handlePlantRequirement}\n                  handlePlantWatering={this.handlePlantWateringButton}\n                />\n              )}\n            />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Main);\n","/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/containers/Header/Header.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/UI/Spinner/Spinner.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/UI/Modal/Modal.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/BurgerMenu/BurgerMenu.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/controls/Button/Button.js",[],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/PlantPage/PlantPage.js",["71"],"/home/claus/Documents/GitHub/plant-caretaker-project/plant-caretaker-project/src/components/Forms/AddPlantForm/AddPlantForm.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":17,"column":8,"nodeType":"78","messageId":"79","endLine":17,"endColumn":21},{"ruleId":"76","severity":1,"message":"80","line":3,"column":8,"nodeType":"78","messageId":"79","endLine":3,"endColumn":17},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'plantInfoCard' is defined but never used.","Identifier","unusedVar","'PlantCard' is defined but never used.","no-global-assign","no-unsafe-negation"]